/* tslint:disable */
/* eslint-disable */
/**
 * GitHub Search Repositories (Simplified)
 * Simplified schema for GitHub\'s /search/repositories endpoint. Only required fields for client display are included. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IRepositorySearchResponse,
} from '../models/index';
import {
    IRepositorySearchResponseFromJSON,
    IRepositorySearchResponseToJSON,
} from '../models/index';

export interface SearchRepositoriesGetRequest {
    q: string;
    sort?: SearchRepositoriesGetSortEnum;
    order?: SearchRepositoriesGetOrderEnum;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Search repositories
     */
    async searchRepositoriesGetRaw(requestParameters: SearchRepositoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IRepositorySearchResponse>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling searchRepositoriesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/search/repositories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IRepositorySearchResponseFromJSON(jsonValue));
    }

    /**
     * Search repositories
     */
    async searchRepositoriesGet(requestParameters: SearchRepositoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IRepositorySearchResponse> {
        const response = await this.searchRepositoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchRepositoriesGetSortEnum = {
    stars: 'stars'
} as const;
export type SearchRepositoriesGetSortEnum = typeof SearchRepositoriesGetSortEnum[keyof typeof SearchRepositoriesGetSortEnum];
/**
 * @export
 */
export const SearchRepositoriesGetOrderEnum = {
    asc: 'asc',
    desc: 'desc'
} as const;
export type SearchRepositoriesGetOrderEnum = typeof SearchRepositoriesGetOrderEnum[keyof typeof SearchRepositoriesGetOrderEnum];
